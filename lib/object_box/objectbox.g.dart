// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../object_box/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 2411897133759420617),
    name: 'CollectComic',
    lastPropertyId: const obx_int.IdUid(58, 111759486064154954),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9011083039111528218),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4062817804496799821),
        name: 'popular',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8365608370910860040),
        name: 'lastViewingTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 7735672729358470722),
        name: 'collectTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 3699684194321769306),
        name: 'haveNewChapter',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(46, 8691517548894997641),
        name: 'deleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(47, 1325543195107920511),
        name: 'pathWord',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(48, 865332446311037481),
        name: 'coverUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(49, 176153368316463256),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(50, 3814598752824913261),
        name: 'alias',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(51, 2923318143137388547),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(52, 1246951685578721401),
        name: 'theme',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(53, 202568637882515179),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(54, 2061035244349101122),
        name: 'region',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(55, 493116104549432408),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(56, 4839045204192297545),
        name: 'lastUpdatedTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(57, 3424904714291976407),
        name: 'deleteTime',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3338140183906312911),
    name: 'ComicHistory',
    lastPropertyId: const obx_int.IdUid(20, 3517423454969421457),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 546702601957185290),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6148099461748782335),
        name: 'pathWord',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3604446044470875977),
        name: 'coverUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1242831517742164767),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6517479555502652200),
        name: 'alias',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7733965291670374589),
        name: 'region',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7548639894322192826),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2789296713036651001),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 743551657195032061),
        name: 'theme',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1789418887204182300),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2180824220885471129),
        name: 'popular',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 2340910383303483075),
        name: 'deleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 7834466912814402244),
        name: 'lastViewingTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 5564571256111920422),
        name: 'chapterId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 2947544653796745344),
        name: 'chapterName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 3725806098504148021),
        name: 'chapterIndex',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 1813739083927875432),
        name: 'lastUpdatedTime',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 7858220600298591830),
        name: 'deleteTime',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 5848139356216846480),
    name: 'ComicDownload',
    lastPropertyId: const obx_int.IdUid(16, 7937801800051864506),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2807599956324029599),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5890767627019212000),
        name: 'pathWord',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4491130884497072969),
        name: 'coverUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5281313795234969410),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6835252191662403813),
        name: 'alias',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3661046008105336897),
        name: 'region',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3689316821447594300),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6858019656287746912),
        name: 'author',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 508191559969283291),
        name: 'theme',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4429391662219946396),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 3751166311089001613),
        name: 'popular',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 5136649948830174227),
        name: 'allInfo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 5486009887312295668),
        name: 'comicBaseInfo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 8800731810625887693),
        name: 'deleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 7937801800051864506),
        name: 'downloadTime',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 5848139356216846480),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      8929781775755365069,
      7737819706972173954,
      6092687364133949240,
      4661911165179236010,
      9064532929642036721,
      8974370954545816214,
      6104782517059628488,
      4296100044646433034,
      6759834377037168275,
      6655263576340322876,
      216503370667452273,
      918480820761638407,
      2810551054234382726,
      2532584975995588109,
      201413598619393178,
      3026260707541697414,
      3642011766136063491,
      8442648861152932720,
      484248094866916965,
      8570131095385079300,
      1912241028493089038,
      7126673473794589225,
      3472420871239700129,
      6315506160786165797,
      397872254840233632,
      5462605378316848000,
      1683061642709227662,
      2932010684299447623,
      8253751208709645378,
      8570771881924608785,
      7274602244313306285,
      4157480695163055341,
      2519715926337756568,
      3780986215652422390,
      2182776198287063848,
      6115949136938991275,
      7151512584088953923,
      1749842401183522000,
      7968629622030518179,
      4271289338371488856,
      2829176784075808101,
      111759486064154954,
      3517423454969421457,
      961969241200217424,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    CollectComic: obx_int.EntityDefinition<CollectComic>(
      model: _entities[0],
      toOneRelations: (CollectComic object) => [],
      toManyRelations: (CollectComic object) => {},
      getId: (CollectComic object) => object.id,
      setId: (CollectComic object, int id) {
        object.id = id;
      },
      objectToFB: (CollectComic object, fb.Builder fbb) {
        final pathWordOffset = fbb.writeString(object.pathWord);
        final coverUrlOffset = fbb.writeString(object.coverUrl);
        final nameOffset = fbb.writeString(object.name);
        final aliasOffset = fbb.writeString(object.alias);
        final authorOffset = fbb.writeString(object.author);
        final themeOffset = fbb.writeList(
          object.theme.map(fbb.writeString).toList(growable: false),
        );
        final descriptionOffset = fbb.writeString(object.description);
        final regionOffset = fbb.writeString(object.region);
        final statusOffset = fbb.writeString(object.status);
        fbb.startTable(59);
        fbb.addInt64(0, object.id);
        fbb.addInt64(9, object.popular);
        fbb.addInt64(10, object.lastViewingTime.millisecondsSinceEpoch);
        fbb.addInt64(11, object.collectTime.millisecondsSinceEpoch);
        fbb.addBool(12, object.haveNewChapter);
        fbb.addBool(45, object.deleted);
        fbb.addOffset(46, pathWordOffset);
        fbb.addOffset(47, coverUrlOffset);
        fbb.addOffset(48, nameOffset);
        fbb.addOffset(49, aliasOffset);
        fbb.addOffset(50, authorOffset);
        fbb.addOffset(51, themeOffset);
        fbb.addOffset(52, descriptionOffset);
        fbb.addOffset(53, regionOffset);
        fbb.addOffset(54, statusOffset);
        fbb.addInt64(55, object.lastUpdatedTime.millisecondsSinceEpoch);
        fbb.addInt64(56, object.deleteTime.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final pathWordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 96, '');
        final coverUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 98, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 100, '');
        final aliasParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 102, '');
        final regionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 110, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 112, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 104, '');
        final themeParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 106, []);
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 108, '');
        final lastUpdatedTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 114, 0),
        );
        final deletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          94,
          false,
        );
        final deleteTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 116, 0),
        );
        final lastViewingTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
        );
        final collectTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
        );
        final popularParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        final haveNewChapterParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          28,
          false,
        );
        final object = CollectComic(
          id: idParam,
          pathWord: pathWordParam,
          coverUrl: coverUrlParam,
          name: nameParam,
          alias: aliasParam,
          region: regionParam,
          status: statusParam,
          author: authorParam,
          theme: themeParam,
          description: descriptionParam,
          lastUpdatedTime: lastUpdatedTimeParam,
          deleted: deletedParam,
          deleteTime: deleteTimeParam,
          lastViewingTime: lastViewingTimeParam,
          collectTime: collectTimeParam,
          popular: popularParam,
          haveNewChapter: haveNewChapterParam,
        );

        return object;
      },
    ),
    ComicHistory: obx_int.EntityDefinition<ComicHistory>(
      model: _entities[1],
      toOneRelations: (ComicHistory object) => [],
      toManyRelations: (ComicHistory object) => {},
      getId: (ComicHistory object) => object.id,
      setId: (ComicHistory object, int id) {
        object.id = id;
      },
      objectToFB: (ComicHistory object, fb.Builder fbb) {
        final pathWordOffset = fbb.writeString(object.pathWord);
        final coverUrlOffset = fbb.writeString(object.coverUrl);
        final nameOffset = fbb.writeString(object.name);
        final aliasOffset = fbb.writeString(object.alias);
        final regionOffset = fbb.writeString(object.region);
        final statusOffset = fbb.writeString(object.status);
        final authorOffset = fbb.writeString(object.author);
        final themeOffset = fbb.writeList(
          object.theme.map(fbb.writeString).toList(growable: false),
        );
        final descriptionOffset = fbb.writeString(object.description);
        final chapterIdOffset = fbb.writeString(object.chapterId);
        final chapterNameOffset = fbb.writeString(object.chapterName);
        fbb.startTable(21);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, pathWordOffset);
        fbb.addOffset(2, coverUrlOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, aliasOffset);
        fbb.addOffset(5, regionOffset);
        fbb.addOffset(6, statusOffset);
        fbb.addOffset(7, authorOffset);
        fbb.addOffset(8, themeOffset);
        fbb.addOffset(9, descriptionOffset);
        fbb.addInt64(10, object.popular);
        fbb.addBool(11, object.deleted);
        fbb.addInt64(13, object.lastViewingTime.millisecondsSinceEpoch);
        fbb.addOffset(14, chapterIdOffset);
        fbb.addOffset(15, chapterNameOffset);
        fbb.addInt64(16, object.chapterIndex);
        fbb.addInt64(17, object.lastUpdatedTime.millisecondsSinceEpoch);
        fbb.addInt64(18, object.deleteTime.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final pathWordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final coverUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final aliasParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final regionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final themeParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 20, []);
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final popularParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final lastUpdatedTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0),
        );
        final deleteTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0),
        );
        final lastViewingTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0),
        );
        final chapterIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final chapterNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final chapterIndexParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          36,
          0,
        );
        final deletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          26,
          false,
        );
        final object = ComicHistory(
          id: idParam,
          pathWord: pathWordParam,
          coverUrl: coverUrlParam,
          name: nameParam,
          alias: aliasParam,
          region: regionParam,
          status: statusParam,
          author: authorParam,
          theme: themeParam,
          description: descriptionParam,
          popular: popularParam,
          lastUpdatedTime: lastUpdatedTimeParam,
          deleteTime: deleteTimeParam,
          lastViewingTime: lastViewingTimeParam,
          chapterId: chapterIdParam,
          chapterName: chapterNameParam,
          chapterIndex: chapterIndexParam,
          deleted: deletedParam,
        );

        return object;
      },
    ),
    ComicDownload: obx_int.EntityDefinition<ComicDownload>(
      model: _entities[2],
      toOneRelations: (ComicDownload object) => [],
      toManyRelations: (ComicDownload object) => {},
      getId: (ComicDownload object) => object.id,
      setId: (ComicDownload object, int id) {
        object.id = id;
      },
      objectToFB: (ComicDownload object, fb.Builder fbb) {
        final pathWordOffset = fbb.writeString(object.pathWord);
        final coverUrlOffset = fbb.writeString(object.coverUrl);
        final nameOffset = fbb.writeString(object.name);
        final aliasOffset = fbb.writeString(object.alias);
        final regionOffset = fbb.writeString(object.region);
        final statusOffset = fbb.writeString(object.status);
        final authorOffset = fbb.writeString(object.author);
        final themeOffset = fbb.writeList(
          object.theme.map(fbb.writeString).toList(growable: false),
        );
        final descriptionOffset = fbb.writeString(object.description);
        final allInfoOffset = fbb.writeString(object.allInfo);
        final comicBaseInfoOffset = fbb.writeString(object.comicBaseInfo);
        fbb.startTable(17);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, pathWordOffset);
        fbb.addOffset(2, coverUrlOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, aliasOffset);
        fbb.addOffset(5, regionOffset);
        fbb.addOffset(6, statusOffset);
        fbb.addOffset(7, authorOffset);
        fbb.addOffset(8, themeOffset);
        fbb.addOffset(9, descriptionOffset);
        fbb.addInt64(10, object.popular);
        fbb.addOffset(12, allInfoOffset);
        fbb.addOffset(13, comicBaseInfoOffset);
        fbb.addBool(14, object.deleted);
        fbb.addInt64(15, object.downloadTime.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final pathWordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final coverUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final aliasParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final regionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final authorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final themeParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 20, []);
        final descriptionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final popularParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        final deletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          32,
          false,
        );
        final downloadTimeParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0),
        );
        final comicBaseInfoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final allInfoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final object = ComicDownload(
          id: idParam,
          pathWord: pathWordParam,
          coverUrl: coverUrlParam,
          name: nameParam,
          alias: aliasParam,
          region: regionParam,
          status: statusParam,
          author: authorParam,
          theme: themeParam,
          description: descriptionParam,
          popular: popularParam,
          deleted: deletedParam,
          downloadTime: downloadTimeParam,
          comicBaseInfo: comicBaseInfoParam,
          allInfo: allInfoParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [CollectComic] entity fields to define ObjectBox queries.
class CollectComic_ {
  /// See [CollectComic.id].
  static final id = obx.QueryIntegerProperty<CollectComic>(
    _entities[0].properties[0],
  );

  /// See [CollectComic.popular].
  static final popular = obx.QueryIntegerProperty<CollectComic>(
    _entities[0].properties[1],
  );

  /// See [CollectComic.lastViewingTime].
  static final lastViewingTime = obx.QueryDateProperty<CollectComic>(
    _entities[0].properties[2],
  );

  /// See [CollectComic.collectTime].
  static final collectTime = obx.QueryDateProperty<CollectComic>(
    _entities[0].properties[3],
  );

  /// See [CollectComic.haveNewChapter].
  static final haveNewChapter = obx.QueryBooleanProperty<CollectComic>(
    _entities[0].properties[4],
  );

  /// See [CollectComic.deleted].
  static final deleted = obx.QueryBooleanProperty<CollectComic>(
    _entities[0].properties[5],
  );

  /// See [CollectComic.pathWord].
  static final pathWord = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[6],
  );

  /// See [CollectComic.coverUrl].
  static final coverUrl = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[7],
  );

  /// See [CollectComic.name].
  static final name = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[8],
  );

  /// See [CollectComic.alias].
  static final alias = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[9],
  );

  /// See [CollectComic.author].
  static final author = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[10],
  );

  /// See [CollectComic.theme].
  static final theme = obx.QueryStringVectorProperty<CollectComic>(
    _entities[0].properties[11],
  );

  /// See [CollectComic.description].
  static final description = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[12],
  );

  /// See [CollectComic.region].
  static final region = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[13],
  );

  /// See [CollectComic.status].
  static final status = obx.QueryStringProperty<CollectComic>(
    _entities[0].properties[14],
  );

  /// See [CollectComic.lastUpdatedTime].
  static final lastUpdatedTime = obx.QueryDateProperty<CollectComic>(
    _entities[0].properties[15],
  );

  /// See [CollectComic.deleteTime].
  static final deleteTime = obx.QueryDateProperty<CollectComic>(
    _entities[0].properties[16],
  );
}

/// [ComicHistory] entity fields to define ObjectBox queries.
class ComicHistory_ {
  /// See [ComicHistory.id].
  static final id = obx.QueryIntegerProperty<ComicHistory>(
    _entities[1].properties[0],
  );

  /// See [ComicHistory.pathWord].
  static final pathWord = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[1],
  );

  /// See [ComicHistory.coverUrl].
  static final coverUrl = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[2],
  );

  /// See [ComicHistory.name].
  static final name = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[3],
  );

  /// See [ComicHistory.alias].
  static final alias = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[4],
  );

  /// See [ComicHistory.region].
  static final region = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[5],
  );

  /// See [ComicHistory.status].
  static final status = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[6],
  );

  /// See [ComicHistory.author].
  static final author = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[7],
  );

  /// See [ComicHistory.theme].
  static final theme = obx.QueryStringVectorProperty<ComicHistory>(
    _entities[1].properties[8],
  );

  /// See [ComicHistory.description].
  static final description = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[9],
  );

  /// See [ComicHistory.popular].
  static final popular = obx.QueryIntegerProperty<ComicHistory>(
    _entities[1].properties[10],
  );

  /// See [ComicHistory.deleted].
  static final deleted = obx.QueryBooleanProperty<ComicHistory>(
    _entities[1].properties[11],
  );

  /// See [ComicHistory.lastViewingTime].
  static final lastViewingTime = obx.QueryDateProperty<ComicHistory>(
    _entities[1].properties[12],
  );

  /// See [ComicHistory.chapterId].
  static final chapterId = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[13],
  );

  /// See [ComicHistory.chapterName].
  static final chapterName = obx.QueryStringProperty<ComicHistory>(
    _entities[1].properties[14],
  );

  /// See [ComicHistory.chapterIndex].
  static final chapterIndex = obx.QueryIntegerProperty<ComicHistory>(
    _entities[1].properties[15],
  );

  /// See [ComicHistory.lastUpdatedTime].
  static final lastUpdatedTime = obx.QueryDateProperty<ComicHistory>(
    _entities[1].properties[16],
  );

  /// See [ComicHistory.deleteTime].
  static final deleteTime = obx.QueryDateProperty<ComicHistory>(
    _entities[1].properties[17],
  );
}

/// [ComicDownload] entity fields to define ObjectBox queries.
class ComicDownload_ {
  /// See [ComicDownload.id].
  static final id = obx.QueryIntegerProperty<ComicDownload>(
    _entities[2].properties[0],
  );

  /// See [ComicDownload.pathWord].
  static final pathWord = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[1],
  );

  /// See [ComicDownload.coverUrl].
  static final coverUrl = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[2],
  );

  /// See [ComicDownload.name].
  static final name = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[3],
  );

  /// See [ComicDownload.alias].
  static final alias = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[4],
  );

  /// See [ComicDownload.region].
  static final region = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[5],
  );

  /// See [ComicDownload.status].
  static final status = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[6],
  );

  /// See [ComicDownload.author].
  static final author = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[7],
  );

  /// See [ComicDownload.theme].
  static final theme = obx.QueryStringVectorProperty<ComicDownload>(
    _entities[2].properties[8],
  );

  /// See [ComicDownload.description].
  static final description = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[9],
  );

  /// See [ComicDownload.popular].
  static final popular = obx.QueryIntegerProperty<ComicDownload>(
    _entities[2].properties[10],
  );

  /// See [ComicDownload.allInfo].
  static final allInfo = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[11],
  );

  /// See [ComicDownload.comicBaseInfo].
  static final comicBaseInfo = obx.QueryStringProperty<ComicDownload>(
    _entities[2].properties[12],
  );

  /// See [ComicDownload.deleted].
  static final deleted = obx.QueryBooleanProperty<ComicDownload>(
    _entities[2].properties[13],
  );

  /// See [ComicDownload.downloadTime].
  static final downloadTime = obx.QueryDateProperty<ComicDownload>(
    _entities[2].properties[14],
  );
}
